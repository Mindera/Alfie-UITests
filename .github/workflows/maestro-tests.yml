name: Maestro UI Tests

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test (ios/android)'
        required: true
        type: choice
        options:
          - ios
          - android
      app_url:
        description: 'URL to download the app binary (.app/.apk)'
        required: true
      test_tag:
        description: 'Test tag to run (e.g., searchTests)'
        required: true
        default: 'searchTests'

jobs:
  mobile-test:
    name: Run ${{ github.event.inputs.platform }} UI Tests
    runs-on: ${{ github.event.inputs.platform == 'ios' && 'macos-latest' || 'ubuntu-latest' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Checkout Alfie-Mocks repository
        uses: actions/checkout@v3
        with:
          repository: Mindera/Alfie-Mocks
          path: alfie-mocks

      - name: Install and Start Mock Server
        run: |
          cd alfie-mocks
          npm install apollo-server graphql
          node index.js &
          sleep 5
          curl -s http://localhost:4000 > /dev/null || exit 1
          cd ..

      - name: Install Maestro
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "${HOME}/.maestro/bin" >> $GITHUB_PATH

      - name: Setup iOS dependencies
        if: github.event.inputs.platform == 'ios'
        run: |
          sudo xcode-select --switch /Applications/Xcode.app
          xcrun simctl list devices

      - name: Setup Java
        if: github.event.inputs.platform == 'android'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android Emulator
        if: github.event.inputs.platform == 'android'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86_64
          profile: pixel_2
          emulator-options: >-
            -no-window
            -gpu swiftshader_indirect
            -noaudio
            -no-boot-anim
            -no-snapshot
            -memory 3072
            -cores 2
          script: |
            # Criar diretório
            mkdir -p artifacts
            mkdir -p reports
            
            # Download do APK
            echo "Downloading APK from ${{ github.event.inputs.app_url }}"
            curl -L "${{ github.event.inputs.app_url }}" -o artifacts/Alfie.apk
            
            # Verificar se o download foi bem-sucedido
            ls -la artifacts/
            
            # Aguardar o emulador estabilizar
            echo "Aguardando o emulador estabilizar..."
            sleep 60
            
            # Verificar estado do emulador
            adb devices
            
            # Tentar instalar o APK
            echo "Instalando APK..."
            adb install -r artifacts/Alfie.apk
            echo "✅ APK instalado com sucesso!"
            
            # Executar os testes usando o script run-tests.sh
            # Passando o parâmetro --skip-device-check para evitar que o script tente inicializar o emulador novamente
            echo "Executando testes via script..."
            ./scripts/run-tests.sh android ${{ github.event.inputs.test_tag }} --skip-device-check

      - name: Setup iOS app
        if: github.event.inputs.platform == 'ios'
        run: |
          RUNTIME_ID=$(xcrun simctl list runtimes | grep iOS | tail -n1 | cut -d ' ' -f7)
          DEVICE_NAME="iPhone 15"
          DEVICE_ID=$(xcrun simctl create "$DEVICE_NAME" "com.apple.CoreSimulator.SimDeviceType.iPhone-15" "$RUNTIME_ID")
          xcrun simctl boot "$DEVICE_ID"
          until xcrun simctl list devices | grep -q "$DEVICE_ID.*Booted"; do sleep 2; done
          curl -L "${{ github.event.inputs.app_url }}" -o artifacts/app.zip
          cd artifacts && unzip app.zip && rm app.zip
          [ ! -d "Alfie.app" ] && mv *.app Alfie.app
          xcrun simctl install "$DEVICE_ID" "Alfie.app"
          xcrun simctl get_app_container "$DEVICE_ID" "com.mindera.alfie.debug" > /dev/null 2>&1 || exit 1

      - name: Give permission to run script
        run: chmod +x scripts/run-tests.sh

      - name: Collect test artifacts
        if: always()
        run: |
          mkdir -p test-artifacts
          cp -r reports/* test-artifacts/ || true
          cp -r ~/.maestro/tests/* test-artifacts/screenshots/ || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.platform }}-test-results
          path: |
            test-artifacts/
            reports/
            ~/.maestro/tests/
          retention-days: 30 