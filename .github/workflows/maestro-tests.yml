name: Maestro UI Tests

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test (ios/android)'
        required: true
        type: choice
        options:
          - ios
          - android
      app_url:
        description: 'URL to download the app binary (.app/.apk)'
        required: true
      test_tag:
        description: 'Test tag to run (e.g., searchTests)'
        required: true
        default: 'searchTests'

jobs:
  mobile-test:
    name: Run ${{ github.event.inputs.platform }} UI Tests
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Add Mock Server setup
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Checkout Alfie-Mocks repository
        uses: actions/checkout@v3
        with:
          repository: Mindera/Alfie-Mocks
          path: alfie-mocks

      - name: Install and Start Mock Server
        run: |
          cd alfie-mocks
          npm install apollo-server graphql
          # Start the mock server in background
          node index.js &
          # Wait for server to be ready
          sleep 5
          # Verify server is running
          curl -s http://localhost:4000 > /dev/null
          if [ $? -eq 0 ]; then
            echo "✅ Mock server is running"
          else
            echo "❌ Failed to start mock server"
            exit 1
          fi
          cd ..

      - name: Install Maestro
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "${HOME}/.maestro/bin" >> $GITHUB_PATH

      # iOS specific setup
      - name: Setup iOS dependencies
        if: github.event.inputs.platform == 'ios'
        run: |
          # Setup Xcode
          sudo xcode-select --switch /Applications/Xcode.app
          xcrun simctl list devices

      # Android specific setup
      - name: Setup Java
        if: github.event.inputs.platform == 'android'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        if: github.event.inputs.platform == 'android'
        uses: android-actions/setup-android@v3
        
      - name: Configure Android SDK
        if: github.event.inputs.platform == 'android'
        run: |
          export ANDROID_HOME=$HOME/android-sdk
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
          
          # Accept licenses and install required packages
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-31" "build-tools;31.0.0"
          
          # Verify installation
          adb --version
          if [ $? -eq 0 ]; then
            echo "✅ Android SDK setup complete"
          else
            echo "❌ Failed to setup Android SDK"
            exit 1
          fi

      - name: Create required directories
        run: |
          mkdir -p artifacts
          mkdir -p reports

      # Platform specific app download and setup
      - name: Setup iOS app
        if: github.event.inputs.platform == 'ios'
        run: |
          # Create a new simulator
          RUNTIME_ID=$(xcrun simctl list runtimes | grep iOS | tail -n1 | cut -d ' ' -f7)
          DEVICE_NAME="iPhone 15"
          DEVICE_ID=$(xcrun simctl create "$DEVICE_NAME" "com.apple.CoreSimulator.SimDeviceType.iPhone-15" "$RUNTIME_ID")
          echo "Created simulator: $DEVICE_ID"
          
          # Boot simulator
          xcrun simctl boot "$DEVICE_ID"
          
          # Wait for simulator to be fully ready
          echo "Waiting for simulator to be ready..."
          until xcrun simctl list devices | grep -q "$DEVICE_ID.*Booted"; do
            echo "Waiting for simulator to boot..."
            sleep 2
          done
          echo "Simulator is ready"
          
          # Now download and install the app
          curl -L "${{ github.event.inputs.app_url }}" -o artifacts/app.zip
          cd artifacts && unzip app.zip && rm app.zip
          
          # Only rename if needed
          if [ ! -d "Alfie.app" ] && [ -n "$(find . -name '*.app' ! -name 'Alfie.app')" ]; then
            mv *.app Alfie.app
          fi
          
          # Install the app
          echo "Installing app..."
          xcrun simctl install "$DEVICE_ID" "Alfie.app"
          
          # Verify installation
          if xcrun simctl get_app_container "$DEVICE_ID" "com.mindera.alfie.debug" > /dev/null 2>&1; then
            echo "✅ App installed successfully"
          else
            echo "❌ Failed to install app"
            echo "App container contents:"
            xcrun simctl get_app_container "$DEVICE_ID" "com.mindera.alfie.debug" || true
            echo "Simulator apps:"
            xcrun simctl listapps "$DEVICE_ID"
            exit 1
          fi


      - name: Setup Android app
        if: github.event.inputs.platform == 'android'
        run: |
          curl -L "${{ github.event.inputs.app_url }}" -o artifacts/Alfie.apk
          
          # Start emulator
          echo "y" | sdkmanager "system-images;android-31;google_apis;x86_64"
          echo "no" | avdmanager create avd -n test -k "system-images;android-31;google_apis;x86_64"
          $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &
          adb wait-for-device

      - name: Give permission to run script
        run: chmod +x scripts/run-tests.sh

      - name: Run Maestro tests
        env:
          MAESTRO_CLI_NO_ANALYTICS: "true"
          MAESTRO_CLI_ANALYSIS_NOTIFICATION_DISABLED: "true"
        run: |
          mkdir -p reports
          ./scripts/run-tests.sh ${{ github.event.inputs.platform }} ${{ github.event.inputs.test_tag }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.platform }}-test-results
          path: reports/
          retention-days: 30 