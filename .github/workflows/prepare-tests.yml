name: Prepare Tests for BrowserStack

on:
  workflow_dispatch:
    inputs:
      test_folders:
        description: 'Folders containing tests to prepare (comma-separated, e.g., searchTests,cartTests)'
        required: true
        type: string
        default: 'searchTests'
      app_id:
        description: 'App ID to use in tests'
        required: true
        type: string
        default: 'com.example.app'
      bs_local:
        description: 'Run with BrowserStack Local'
        type: boolean
        default: true
      bs_app:
        description: 'BrowserStack App ID (bs://...)'
        required: true
        type: string
      devices:
        description: 'Devices to test on (comma-separated, e.g., "iPhone 15-17.0,iPhone 14-16.0")'
        required: true
        type: string
        default: 'iPhone 15-17.0'

jobs:
  prepare-tests:
    runs-on: ubuntu-latest
    outputs:
      test_suite_url: ${{ steps.upload_to_browserstack.outputs.test_suite_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Checkout Alfie-Mocks repository
        uses: actions/checkout@v3
        with:
          repository: Mindera/Alfie-Mocks
          path: alfie-mocks

      - name: Setup BrowserStack Local
        if: ${{ inputs.bs_local }}
        run: |
          # Download BrowserStackLocal binary
          wget "https://www.browserstack.com/browserstack-local/BrowserStackLocal-linux-x64.zip"
          unzip BrowserStackLocal-linux-x64.zip
          chmod +x BrowserStackLocal
          
          # Start BrowserStackLocal in background
          ./BrowserStackLocal --key ${{ secrets.ACCESS_KEY }} --force-local &
          
          # Wait for connection
          sleep 5
          
      - name: Setup test directory structure
        run: |
          # Create temp directory structure
          mkdir -p temp_tests/tests
          
          # Copy required directories
          cp -r generics temp_tests/tests/
          cp -r screens temp_tests/tests/
          
          # Convert comma-separated list to array and copy each folder's contents
          IFS=',' read -ra FOLDERS <<< "${{ inputs.test_folders }}"
          for folder in "${FOLDERS[@]}"; do
            # Remove any whitespace
            folder=$(echo $folder | xargs)
            echo "Processing folder: $folder"
            cp -r tests/$folder/* temp_tests/tests/
          done
          
          # Update only test files paths to start with ./
          cd temp_tests/tests
          for f in *.yaml; do
            if [ -f "$f" ]; then
              sed -i 's|../../generics|./generics|g' "$f"
              sed -i 's|../../screens|./screens|g' "$f"
            fi
          done
          cd ../..
          
          # Update APP_ID in all yaml files
          find temp_tests/tests -name "*.yaml" -type f -exec sed -i "s|\${env.APP_ID}|${{ inputs.app_id }}|g" {} +
          find temp_tests/tests -name "*.yaml" -type f -exec sed -i "s|\${APP_ID}|${{ inputs.app_id }}|g" {} +
          
          # Create list of visible files only and copy them
          cd temp_tests
          find . \( ! -regex '.*/\..*' \) -type f > ../visible_files.txt
          mkdir -p ../clean_tests
          rsync -a --files-from=../visible_files.txt . ../clean_tests/
          cd ..
          rm visible_files.txt
          rm -rf temp_tests

      - name: Create zip for BrowserStack
        run: |
          cd clean_tests
          zip -r ../browserstack_tests.zip ./*
          cd ..

      - name: Upload to BrowserStack
        id: upload_to_browserstack
        run: |
          # Remove whitespace and replace commas with underscores for custom_id
          CUSTOM_ID=$(echo "${{ inputs.test_folders }}" | tr -d ' ' | tr ',' '_')
          
          # Create auth string
          AUTH_STRING="${{ secrets.USERNAME }}:${{ secrets.ACCESS_KEY }}"
          
          echo "Attempting upload with auth..."
          
          RESPONSE=$(curl --fail \
            -u "${{ secrets.USERNAME }}:${{ secrets.ACCESS_KEY }}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/maestro/v2/test-suite" \
            -F "file=@browserstack_tests.zip" \
            -F "custom_id=$CUSTOM_ID")
          
          if [ $? -ne 0 ]; then
            echo "Error: Failed to upload to BrowserStack"
            exit 1
          fi
          
          echo "Response from BrowserStack: $RESPONSE"
          
          if ! echo "$RESPONSE" | jq . >/dev/null 2>&1; then
            echo "Error: Invalid JSON response"
            echo "Raw response: $RESPONSE"
            exit 1
          fi
          
          # Extract test_suite_url and set as output
          TEST_SUITE_URL=$(echo $RESPONSE | jq -r '.test_suite_url')
          
          if [ -z "$TEST_SUITE_URL" ] || [ "$TEST_SUITE_URL" = "null" ]; then
            echo "Error: No test_suite_url in response"
            echo "Full response: $RESPONSE"
            exit 1
          fi
          
          echo "test_suite_url=$TEST_SUITE_URL" >> $GITHUB_OUTPUT
          
          # Save full response for debugging
          echo $RESPONSE > browserstack_response.json

      - name: Upload response as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: browserstack_response
          path: browserstack_response.json
          retention-days: 5

      - name: Stop BrowserStack Local
        if: ${{ inputs.bs_local }}
        run: |
          pkill BrowserStackLocal || true 

  run-tests:
    needs: prepare-tests
    runs-on: ubuntu-latest
    steps:
      - name: Execute Test Suite
        id: execute_suite
        run: |
          # Convert devices string to JSON array
          DEVICES_JSON=$(echo "${{ inputs.devices }}" | \
            tr ',' '\n' | \
            jq -R . | \
            jq -s .)
          
          # Prepare request body
          REQUEST_BODY=$(jq -n \
            --arg app "${{ inputs.bs_app }}" \
            --arg suite "${{ needs.prepare-tests.outputs.test_suite_url }}" \
            --argjson devices "$DEVICES_JSON" \
            '{
              "app": $app,
              "testSuite": $suite,
              "project": "Maestro_Test",
              "devices": $devices,
              "networkLogs": "true",
              "deviceLogs": "true"
            }')
          
          echo "Request body: $REQUEST_BODY"
          
          RESPONSE=$(curl --fail \
            -u "${{ secrets.USERNAME }}:${{ secrets.ACCESS_KEY }}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/maestro/v2/ios/build" \
            -H "Content-Type: application/json" \
            -d "$REQUEST_BODY")
          
          if [ $? -ne 0 ]; then
            echo "Error: Failed to start build"
            exit 1
          fi
          
          echo "Response from BrowserStack: $RESPONSE"
          
          # Extract build_id and set as output
          BUILD_ID=$(echo $RESPONSE | jq -r '.build_id')
          
          if [ -z "$BUILD_ID" ] || [ "$BUILD_ID" = "null" ]; then
            echo "Error: No build_id in response"
            echo "Full response: $RESPONSE"
            exit 1
          fi
          
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          
          # Save response for debugging
          echo $RESPONSE > browserstack_build_response.json

      - name: Upload build response as artifact
        uses: actions/upload-artifact@v4
        with:
          name: browserstack_build_response
          path: browserstack_build_response.json
          retention-days: 5 