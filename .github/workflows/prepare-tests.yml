name: Prepare Tests for BrowserStack

on:
  workflow_dispatch:
    inputs:
      test_folders:
        description: 'Folders containing tests to prepare (comma-separated, e.g., searchTests,cartTests)'
        required: true
        type: string
        default: 'searchTests'
      app_id:
        description: 'App ID to use in tests'
        required: true
        type: string
        default: 'com.example.app'
      bs_local:
        description: 'Run with BrowserStack Local'
        type: boolean
        default: true
      bs_app:
        description: 'BrowserStack App ID (bs://...)'
        required: true
        type: string
      devices:
        description: 'Devices to test on (comma-separated, e.g., "iPhone 15-17.0,iPhone 14-16.0")'
        required: true
        type: string
        default: 'iPhone 15-17.0'

jobs:
  run-tests:
    runs-on: ubuntu-latest
    environment: BrowserStack
    steps:
      - uses: actions/checkout@v4
      
      - name: Checkout Alfie-Mocks repository
        uses: actions/checkout@v3
        with:
          repository: Mindera/Alfie-Mocks
          path: alfie-mocks

      - name: Setup BrowserStack Local
        if: ${{ inputs.bs_local }}
        id: setup_local
        run: |
          # Download and setup BrowserStackLocal
          wget "https://www.browserstack.com/browserstack-local/BrowserStackLocal-linux-x64.zip"
          unzip BrowserStackLocal-linux-x64.zip
          chmod +x BrowserStackLocal
          
          # Start BrowserStackLocal with logging
          ./BrowserStackLocal --key ${BS_ACCESS_KEY} --force-local --verbose > bs_local.log 2>&1 &
          
          # Store the PID
          echo $! > bs_local.pid
          
          # Wait for connection to be established
          for i in {1..30}; do
            if grep -q "You can now access your local server(s)" bs_local.log; then
              echo "BrowserStack Local connected successfully"
              echo "local_ready=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "Waiting for BrowserStack Local to connect... ($i/30)"
            sleep 2
          done
          
          echo "Error: BrowserStack Local failed to connect"
          cat bs_local.log
          exit 1
        env:
          BS_ACCESS_KEY: ${{ secrets.ACCESS_KEY }}

      - name: Prepare Tests
        id: prepare_tests
        run: |
          # Create temporary directory
          mkdir -p temp_tests/tests
          
          # Copy test files
          IFS=',' read -ra FOLDERS <<< "${{ inputs.test_folders }}"
          for folder in "${FOLDERS[@]}"; do
            if [ -d "tests/$folder" ]; then
              cp -r "tests/$folder"/* "temp_tests/tests/"
            fi
          done
          
          # Copy generics and screens
          cp -r tests/generics temp_tests/
          cp -r tests/screens temp_tests/
          
          # Update paths in test files
          cd temp_tests/tests
          for f in *.yaml; do
            if [ -f "$f" ]; then
              sed -i 's|../../generics|./generics|g' "$f"
              sed -i 's|../../screens|./screens|g' "$f"
            fi
          done
          cd ../..
          
          # Update APP_ID in all yaml files
          find temp_tests/tests -name "*.yaml" -type f -exec sed -i "s|\${env.APP_ID}|${{ inputs.app_id }}|g" {} +
          find temp_tests/tests -name "*.yaml" -type f -exec sed -i "s|\${APP_ID}|${{ inputs.app_id }}|g" {} +
          
          # Create list of visible files only and copy them
          cd temp_tests
          find . \( ! -regex '.*/\..*' \) -type f > ../visible_files.txt
          mkdir -p ../clean_tests
          rsync -a --files-from=../visible_files.txt . ../clean_tests/
          cd ..
          rm visible_files.txt
          rm -rf temp_tests

      - name: Create zip for BrowserStack
        run: |
          cd clean_tests
          zip -r ../browserstack_tests.zip ./*
          cd ..

      - name: Upload to BrowserStack
        id: upload_to_browserstack
        run: |
          # Remove whitespace and replace commas with underscores for custom_id
          CUSTOM_ID=$(echo "${{ inputs.test_folders }}" | tr -d ' ' | tr ',' '_')
          
          RESPONSE=$(curl --fail \
            -u "${BS_USERNAME}:${BS_ACCESS_KEY}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/maestro/v2/test-suite" \
            -F "file=@browserstack_tests.zip" \
            -F "custom_id=$CUSTOM_ID")
          
          echo "Response from BrowserStack: $RESPONSE"
          TEST_SUITE_URL=$(echo $RESPONSE | jq -r '.test_suite_url')
          echo "test_suite_url=$TEST_SUITE_URL" >> $GITHUB_OUTPUT
        env:
          BS_USERNAME: ${{ secrets.USERNAME }}
          BS_ACCESS_KEY: ${{ secrets.ACCESS_KEY }}

      - name: Execute Test Suite
        id: execute_suite
        run: |
          # Convert devices string to JSON array
          DEVICES_JSON=$(echo "${{ inputs.devices }}" | \
            tr ',' '\n' | \
            jq -R . | \
            jq -s .)
          
          # Prepare request body
          REQUEST_BODY=$(jq -n \
            --arg app "${{ inputs.bs_app }}" \
            --arg suite "$TEST_SUITE_URL" \
            --argjson devices "$DEVICES_JSON" \
            --argjson local true \
            '{
              "app": $app,
              "testSuite": $suite,
              "project": "Maestro_Test",
              "devices": $devices,
              "networkLogs": "true",
              "deviceLogs": "true",
              "local": $local,
              "localIdentifier": "GH_WORKFLOW"
            }')
          
          echo "Request body: $REQUEST_BODY"
          
          RESPONSE=$(curl --fail \
            -u "${BS_USERNAME}:${BS_ACCESS_KEY}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/maestro/v2/ios/build" \
            -H "Content-Type: application/json" \
            -d "$REQUEST_BODY")
          
          echo "Response from BrowserStack: $RESPONSE"
          BUILD_ID=$(echo $RESPONSE | jq -r '.build_id')
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
        env:
          BS_USERNAME: ${{ secrets.USERNAME }}
          BS_ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          TEST_SUITE_URL: ${{ steps.upload_to_browserstack.outputs.test_suite_url }}

      - name: Monitor Test Execution
        id: monitor_tests
        run: |
          BUILD_ID=${{ steps.execute_suite.outputs.build_id }}
          STATUS="running"
          
          echo "Monitoring test execution..."
          
          while [ "$STATUS" = "running" ]; do
            RESPONSE=$(curl -s -u "${BS_USERNAME}:${BS_ACCESS_KEY}" \
              -X GET "https://api-cloud.browserstack.com/app-automate/maestro/v2/builds/${BUILD_ID}")
            
            STATUS=$(echo $RESPONSE | jq -r '.status')
            echo "Current status: $STATUS"
            
            if [ "$STATUS" = "running" ]; then
              echo "Tests still running, waiting 30 seconds..."
              sleep 30
            fi
          done
          
          # Extract and format test results
          TOTAL_COUNT=$(echo $RESPONSE | jq -r '.devices[0].sessions[0].testcases.count')
          PASSED=$(echo $RESPONSE | jq -r '.devices[0].sessions[0].testcases.status.passed')
          FAILED=$(echo $RESPONSE | jq -r '.devices[0].sessions[0].testcases.status.failed')
          
          # Create results summary
          RESULTS="Total: $TOTAL_COUNT, Passed: $PASSED, Failed: $FAILED"
          
          # Set outputs
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "results=$RESULTS" >> $GITHUB_OUTPUT
          
          # Save detailed response
          echo $RESPONSE > test_execution_details.json
          
          # Exit with error if tests failed
          if [ "$STATUS" = "failed" ]; then
            echo "Tests failed! Check results above."
            exit 1
          fi
        env:
          BS_USERNAME: ${{ secrets.USERNAME }}
          BS_ACCESS_KEY: ${{ secrets.ACCESS_KEY }}

      - name: Stop BrowserStack Local
        if: always() && inputs.bs_local
        run: |
          if [ -f bs_local.pid ]; then
            pid=$(cat bs_local.pid)
            kill $pid || true
            rm bs_local.pid
          fi
          
          # Upload logs for debugging
          if [ -f bs_local.log ]; then
            echo "BrowserStack Local logs:"
            cat bs_local.log
          fi

      - name: Upload test details
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test_execution_details
          path: |
            test_execution_details.json
            bs_local.log
          retention-days: 5 